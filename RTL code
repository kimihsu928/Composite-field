module CF(
	in_0,
	in_1, 
	mode,
	out_n
);


input wire [7:0] in_0, in_1;
output wire [7:0] out_n;
input wire mode;


wire [3:0]a1,a0,b1,b0;
reg   [3:0]c0,c1;
wire [3:0]temp1,temp2,temp3,temp4,temp5,temp6,temp7,temp8,temp9,temp10;

parameter MULTIPLICATION = 0;
parameter INVERSE = 1 ; 

assign a1[3] = in_0[5] ; 
assign a1[2] = in_0[6] ^ in_0[5] ^ in_0[2]; 
assign a1[1] = in_0[4] ^ in_0[3] ^ in_0[1];
assign a1[0] = in_0[7] ^ in_0[4] ; 

assign a0[3] = in_0[5] ^ in_0[2] ^ in_0[1];  
assign a0[2] = in_0[7] ^ in_0[4] ^ in_0[3] ^ in_0[1];  
assign a0[1] = in_0[5] ^ in_0[1];
assign a0[0] = in_0[3] ^ in_0[1] ^ in_0[0]; 

assign b1[3] = in_1[5] ; 
assign b1[2] = in_1[6] ^ in_1[5] ^ in_1[2]; 
assign b1[1] = in_1[4] ^ in_1[3] ^ in_1[1];
assign b1[0] = in_1[7] ^ in_1[4] ; 

assign b0[3] = in_1[5] ^ in_1[2] ^ in_1[1];  
assign b0[2] = in_1[7] ^ in_1[4] ^ in_1[3] ^ in_1[1];  
assign b0[1] = in_1[5] ^ in_1[1];
assign b0[0] = in_1[3] ^ in_1[1] ^ in_1[0]; 

//mul
GF_16_ELEMENT_MUL A1 (.a(a1^a0),.b(b1^b0),.c(temp1));
GF_16_ELEMENT_MUL A2 (.a(a0),.b(b0),.c(temp2));
GF_16_ELEMENT_MUL A3 (.a(a1),.b(b1),.c(temp3));
GF_16_CONST_MUL A4 (.a(temp3),.c(temp4));
//inverse
GF_16_ELEMENT_MUL A5 (.a(a1),.b(a0),.c(temp5));
GF_16_SAUARE_MUL A6 (.a(a0),.c(temp6));
GF_16_SAUARE_CONST_MUL A7 (.a(a1),.c(temp7));
GF_16_ELEMENT_INV A8 (.a(temp5^temp6^temp7),.c(temp8));
GF_16_ELEMENT_MUL A9 (.a(temp8),.b(a1),.c(temp9));
GF_16_ELEMENT_MUL A10 (.a(temp8),.b(a1^a0),.c(temp10));


always @* begin
	case(mode)
		MULTIPLICATION: begin
			c1 = temp1 ^ temp2 ;
			c0 = temp2 ^ temp4;
		end	
		INVERSE: begin
			c1 = temp9 ; 
			c0 = temp10 ;
		end	
	endcase	

end	

assign out_n[7] = c1[1] ^ c0[2] ;
assign out_n[6] = c1[3] ^ c1[2] ^ c0[3] ^ c0[1] ;
assign out_n[5] = c1[3];
assign out_n[4] = c1[1] ^ c1[0] ^ c0[2] ;
assign out_n[3] = c1[3] ^ c1[0] ^ c0[2] ^ c0[1] ;
assign out_n[2] = c0[3] ^ c0[1] ;
assign out_n[1] = c1[3] ^ c0[1] ;
assign out_n[0] = c1[0] ^ c0[2] ^ c0[0] ;


endmodule
module GF_16_ELEMENT_MUL( //and : 20 xor : 12 
    a, 
    b, 
    c
);
  input wire [3:0]a, b;
  output wire [3:0]c;
  wire temp1;
  wire temp2;
  wire temp3;
  assign temp1 = a[0]^a[3] ;
  assign temp2 = a[2]^a[3] ;

  assign c[3] = (a[3]&b[0])^(a[2]&b[1])^(a[1]&b[2])^(temp1&b[3]);
  assign c[2] = (a[2]&b[0])^(a[1]&b[1])^(temp1&b[2])^(temp2&b[3]);
  assign c[1] = (a[1]&b[0])^(temp1&b[1])^(temp2&b[2])^((a[1]^a[2])&b[3]);
  assign c[0] = (a[0]&b[0])^(a[3]&b[1])^(a[2]&b[2])^(a[1]&b[3]);
endmodule

module GF_16_CONST_MUL( //const=4'b1001
    a, 
    c
);
	input wire [3:0]a;
	output wire [3:0]c;
	assign c[3] = a[0];
	assign c[2] = a[3];
	assign c[1] = a[2];
	assign c[0] = (a[1]^a[0]);
endmodule


module GF_16_ELEMENT_INV( //const=4'b1001
    a, 
    c
);
	input wire [3:0]a;
	output wire [3:0]c;
	wire temp1,temp2,temp3,temp4;
	assign temp1 = a[1]^a[2] ;
	assign temp2 = a[0]^a[3] ;
	assign temp3 = a[2]^a[3] ;
	assign temp4 = a[1]&a[3] ;


	assign c[3] = (a[3]&(a[0]^temp1))^(temp1^a[3])^(temp4&a[2]);
	
	assign c[2] = (a[0]&temp1)^(a[0]&~a[2]&a[3])^temp3;
	
	assign c[1] = (a[0]&temp1)^(a[1]&temp3)^a[3]^(a[0]&temp4);
	
	assign c[0] = (a[2]&(a[0]^a[1]))^( ( a[1]&a[2]) & temp2)^(temp1^temp2);
endmodule

module GF_16_SAUARE_MUL(
	a,
	c
);

	input wire [3:0] a;
	output wire [3:0]c;
	assign c[3] = a[3];
  	assign c[2] = (a[1]^a[3]);
  	assign c[1] = a[2];
  	assign c[0] = (a[2]^a[0]);

endmodule

module GF_16_SAUARE_CONST_MUL(
	a,
	c
);

	input wire [3:0] a;
	output wire [3:0]c;
	assign c[3] = (a[2]^a[0]);
  	assign c[2] = a[3];
  	assign c[1] = a[3]^a[1];
  	assign c[0] = a[0];

endmodule
